---
alwaysApply: true
---

# 프로젝트 규칙

## 프로젝트 구조

- 이 프로젝트는 pnpm workspace를 사용하는 monorepo입니다
- packages/ 디렉토리: 공유 라이브러리 및 패키지
- services/ 디렉토리: 독립적인 서비스 애플리케이션
- internal/ 디렉토리: 내부 설정 파일 (eslint, typescript config)

## 기술 스택

- **패키지 매니저**: pnpm (npm, yarn 사용 금지)
- **프론트엔드**: React, Next.js, TypeScript
- **백엔드**: NestJS, Node.js
- **스타일링**: TailwindCSS, SCSS
- **빌드 도구**: Babel, tsup, Rollup
- **테스트**: Jest, Testing Library
- **기타**: Storybook, Docker, MongoDB

## 개발 규칙

### 1. 패키지 관리

- 모든 패키지 설치는 반드시 pnpm을 사용
- 워크스페이스 내 패키지 참조 시: `pnpm -F <package-name>` 사용
- 루트에서 모든 워크스페이스 실행: `pnpm -r <command>`

### 2. 코드 스타일

- TypeScript 우선 사용 (점진적 마이그레이션 중)
- ESLint, Prettier 설정 준수
- 함수형 컴포넌트와 React Hooks 사용
- 모든 비동기 처리는 async/await 패턴 사용

### 3. 파일 및 폴더 구조

- 컴포넌트: PascalCase (예: `Button.tsx`)
- 유틸리티/헬퍼: camelCase (예: `formatDate.ts`)
- 상수: UPPER_SNAKE_CASE
- 테스트 파일: `*.test.ts`, `*.test.tsx`

### 4. Git 커밋 규칙

- 의미있는 커밋 메시지 작성
- 기능별로 작은 단위로 커밋
- 각 패키지/서비스별로 독립적인 변경사항 관리

### 5. 환경 설정

- Node.js 버전: >= 20.11.0
- pnpm 버전: >= 8.14.1
- 환경변수는 `.env.local` 파일 사용 (`.env`는 git에 포함하지 않음)

### 6. 테스트

- 새로운 기능 추가 시 테스트 코드 작성
- Jest와 Testing Library 사용
- 테스트 커버리지 유지

### 7. 문서화

- 복잡한 로직은 주석으로 설명
- README.md 파일 최신 상태 유지
- API 엔드포인트는 명확한 문서화

### 8. 성능 최적화

- 번들 사이즈 최소화
- 이미지 최적화 (Next.js Image 컴포넌트 사용)
- 코드 분할 및 lazy loading 적용

### 9. 보안

- 환경변수로 민감한 정보 관리
- XSS, CSRF 공격 방지
- 입력값 검증 및 sanitization

### 10. Babel Plugin 개발

- packages/babel-plugin-react-compiler 관련 작업 시:
  - AST 조작에 주의
  - 충분한 테스트 케이스 작성
  - 성능 영향도 고려

## 주요 명령어

```bash
# 개발 서버 실행
pnpm dev

# 특정 워크스페이스 명령 실행
pnpm -F @hyunjin/blog dev

# 테스트 실행
pnpm test

# 빌드
pnpm build

# 린트
pnpm lint
```

## 워크스페이스별 특징

### packages/babel-plugin-react-compiler

- React Compiler 관련 Babel 플러그인 개발
- TypeScript로 작성
- tsup으로 빌드

### services/blog

- Next.js 기반 블로그
- MDX 지원
- Contentlayer 사용

### services/api

- NestJS 기반 API 서버
- TypeScript 사용

### packages/query-core

- 쿼리 관련 핵심 로직
- TypeScript로 작성

## 주의사항

- 절대 npm이나 yarn을 사용하지 마세요
- git에 node_modules, .env, build 결과물을 커밋하지 마세요
- 프로덕션 코드에 console.log를 남기지 마세요
- 타입 안전성을 항상 고려하세요
