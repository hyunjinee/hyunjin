{"version":3,"sources":["../../src/hydration.ts"],"sourcesContent":["import { Query } from './query';\nimport { QueryClient } from './queryClient';\n\n// TYPES\ntype TransformerFn = (data: any) => any;\nfunction defaultTransformerFn(data: any): any {\n  return data;\n}\n\n// FUNCTIONS\nfunction dehydrateMutation() {}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query, serializeData: TransformerFn) {\n  return {\n    state: {},\n  };\n}\n\nexport function hydrate(client: QueryClient, dehydratedState: unknown) {}\n"],"mappings":";AAsBO,SAAS,QAAQ,QAAqB,iBAA0B;AAAC;","names":[]}