{"version":3,"sources":["../../src/queryCache.ts"],"sourcesContent":["import { Action, Query, QueryState } from './query';\nimport { QueryClient } from './queryClient';\nimport { QueryObserver } from './queryObserver';\nimport { Subscribable } from './subscribable';\nimport { DefaultError, NotifyEvent, QueryKey, QueryOptions, WithRequired } from './types';\n\ninterface QueryCacheConfig {\n  onError?: (error: DefaultError, query: Query<unknown, unknown, unknown>) => void;\n  onSuccess?: (data: unknown, query: Query<unknown, unknown, unknown>) => void;\n  onSettled?: (data: unknown | undefined, error: DefaultError | null, query: Query<unknown, unknown, unknown>) => void;\n}\n\ninterface NotifyEventQueryAdded extends NotifyEvent {\n  type: 'added';\n  query: Query<any, any, any, any>;\n}\n\ninterface NotifyEventQueryRemoved extends NotifyEvent {\n  type: 'removed';\n  query: Query<any, any, any, any>;\n}\n\ninterface NotifyEventQueryUpdated extends NotifyEvent {\n  type: 'updated';\n  query: Query<any, any, any, any>;\n  action: Action<any, any>;\n}\n\ninterface NotifyEventQueryObserverAdded extends NotifyEvent {\n  type: 'observerAdded';\n  query: Query<any, any, any, any>;\n  observer: QueryObserver<any, any, any, any, any>;\n}\n\ninterface NotifyEventQueryObserverRemoved extends NotifyEvent {\n  type: 'observerRemoved';\n  query: Query<any, any, any, any>;\n  observer: QueryObserver<any, any, any, any, any>;\n}\n\ninterface NotifyEventQueryObserverResultsUpdated extends NotifyEvent {\n  type: 'observerResultsUpdated';\n  query: Query<any, any, any, any>;\n}\n\ninterface NotifyEventQueryObserverOptionsUpdated extends NotifyEvent {\n  type: 'observerOptionsUpdated';\n  query: Query<any, any, any, any>;\n  observer: QueryObserver<any, any, any, any, any>;\n}\n\nexport type QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventQueryObserverAdded\n  | NotifyEventQueryObserverRemoved\n  | NotifyEventQueryObserverResultsUpdated\n  | NotifyEventQueryObserverOptionsUpdated;\n\ntype QueryCacheListener = (event: QueryCacheNotifyEvent) => void;\n\nexport interface QueryStore {\n  has: (queryHash: string) => boolean;\n  set: (queryHash: string, query: Query) => void;\n  get: (queryHash: string) => Query | undefined;\n  delete: (queryHash: string) => void;\n  values: () => IterableIterator<Query>;\n}\n\n// CLASS\n\nexport class QueryCache extends Subscribable {\n  #queries: QueryStore;\n\n  constructor(public config: QueryCacheConfig = {}) {\n    super();\n    this.#queries = new Map<string, Query>();\n  }\n\n  build<TQueryFnData = unknown, TError = DefaultError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    client: QueryClient,\n    options: WithRequired<QueryOptions<TQueryFnData, TError, TData, TQueryKey>, 'queryKey'>,\n    state?: QueryState<TData, TError>,\n  ) {\n    const queryKey = options.queryKey;\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA,0BAA6B;AAqEtB,IAAM,aAAN,cAAyB,iCAAa;AAAA,EAG3C,YAAmB,SAA2B,CAAC,GAAG;AAChD,UAAM;AADW;AAEjB,SAAK,WAAW,oBAAI,IAAmB;AAAA,EACzC;AAAA,EALA;AAAA,EAOA,MACE,QACA,SACA,OACA;AACA,UAAM,WAAW,QAAQ;AAAA,EAC3B;AACF;","names":[]}